// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: character.sql

package dbmodels

import (
	"context"
)

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO character (
    player_id,
    character_type_id,
    character_data
) VALUES (
    ?, ?, ?
)
RETURNING character_id, player_id, character_type_id, character_data
`

type CreateCharacterParams struct {
	PlayerID        int64
	CharacterTypeID int64
	CharacterData   []byte
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, createCharacter, arg.PlayerID, arg.CharacterTypeID, arg.CharacterData)
	var i Character
	err := row.Scan(
		&i.CharacterID,
		&i.PlayerID,
		&i.CharacterTypeID,
		&i.CharacterData,
	)
	return i, err
}

const getCharacter = `-- name: GetCharacter :one
SELECT character_id, player_id, character_type_id, character_data FROM character
WHERE character_id = ? LIMIT 1
`

func (q *Queries) GetCharacter(ctx context.Context, characterID int64) (Character, error) {
	row := q.db.QueryRowContext(ctx, getCharacter, characterID)
	var i Character
	err := row.Scan(
		&i.CharacterID,
		&i.PlayerID,
		&i.CharacterTypeID,
		&i.CharacterData,
	)
	return i, err
}

const getCharactersByPlayer = `-- name: GetCharactersByPlayer :many
SELECT character_id, player_id, character_type_id, character_data FROM character
WHERE player_id = ?
`

func (q *Queries) GetCharactersByPlayer(ctx context.Context, playerID int64) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, getCharactersByPlayer, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.CharacterID,
			&i.PlayerID,
			&i.CharacterTypeID,
			&i.CharacterData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const playerHasCharacters = `-- name: PlayerHasCharacters :one
SELECT count(*) > 0 FROM character
WHERE player_id = ?
`

func (q *Queries) PlayerHasCharacters(ctx context.Context, playerID int64) (bool, error) {
	row := q.db.QueryRowContext(ctx, playerHasCharacters, playerID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}
