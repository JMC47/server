// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: player.sql

package dbmodels

import (
	"context"
	"database/sql"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO player (
    username,
    nickname,
    password_hash
) VALUES (
    ?, ?, ?
)
RETURNING player_id, username, nickname, password_hash, pang, rank
`

type CreatePlayerParams struct {
	Username     string
	Nickname     sql.NullString
	PasswordHash string
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, createPlayer, arg.Username, arg.Nickname, arg.PasswordHash)
	var i Player
	err := row.Scan(
		&i.PlayerID,
		&i.Username,
		&i.Nickname,
		&i.PasswordHash,
		&i.Pang,
		&i.Rank,
	)
	return i, err
}

const getPlayer = `-- name: GetPlayer :one
SELECT player_id, username, nickname, password_hash, pang, rank FROM player
WHERE player_id = ? LIMIT 1
`

func (q *Queries) GetPlayer(ctx context.Context, playerID int64) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayer, playerID)
	var i Player
	err := row.Scan(
		&i.PlayerID,
		&i.Username,
		&i.Nickname,
		&i.PasswordHash,
		&i.Pang,
		&i.Rank,
	)
	return i, err
}

const getPlayerByUsername = `-- name: GetPlayerByUsername :one
SELECT player_id, username, nickname, password_hash, pang, rank FROM player
WHERE username = ? LIMIT 1
`

func (q *Queries) GetPlayerByUsername(ctx context.Context, username string) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByUsername, username)
	var i Player
	err := row.Scan(
		&i.PlayerID,
		&i.Username,
		&i.Nickname,
		&i.PasswordHash,
		&i.Pang,
		&i.Rank,
	)
	return i, err
}

const setPlayerNickname = `-- name: SetPlayerNickname :one
UPDATE player SET nickname = ? WHERE player_id = ? RETURNING player_id, username, nickname, password_hash, pang, rank
`

type SetPlayerNicknameParams struct {
	Nickname sql.NullString
	PlayerID int64
}

func (q *Queries) SetPlayerNickname(ctx context.Context, arg SetPlayerNicknameParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, setPlayerNickname, arg.Nickname, arg.PlayerID)
	var i Player
	err := row.Scan(
		&i.PlayerID,
		&i.Username,
		&i.Nickname,
		&i.PasswordHash,
		&i.Pang,
		&i.Rank,
	)
	return i, err
}
